<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="p}A%tnA8;qPTofZ*=H}Z">STEERING_KEY</variable><variable id="PatO+S?eK_^#/M0x*C0H">SPEED_KEY</variable></variables><block type="pxt-on-start" x="0" y="0"><statement name="HANDLER"><block type="variables_set"><field name="VAR" id="p}A%tnA8;qPTofZ*=H}Z">STEERING_KEY</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text"><field name="TEXT">steer</field></block></value><next><block type="variables_set"><field name="VAR" id="PatO+S?eK_^#/M0x*C0H">SPEED_KEY</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text"><field name="TEXT">speed</field></block></value><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class IoInterface {" line1="    public setSteeringAngle(aAngle: number) {" line2="        control.fail(&quot;setSteeringAngle not implemented&quot;)" line3="    }" line4="    " line5="    public setSpeed(aSpeed: number) {" line6="        control.fail(&quot;setSpeed not implemented&quot;)" line7="    }" line8="    " line9="}" numlines="10"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class MicrobitIo extends IoInterface {" line1="    static STEERING_PIN: number" line2="    private ___STEERING_PIN_is_set: boolean" line3="    private ___STEERING_PIN: number" line4="    get STEERING_PIN(): number {" line5="        return this.___STEERING_PIN_is_set ? this.___STEERING_PIN : MicrobitIo.STEERING_PIN" line6="    }" line7="    set STEERING_PIN(value: number) {" line8="        this.___STEERING_PIN_is_set = true" line9="        this.___STEERING_PIN = value" line10="    }" line11="    " line12="    static SPEED_PIN: number" line13="    private ___SPEED_PIN_is_set: boolean" line14="    private ___SPEED_PIN: number" line15="    get SPEED_PIN(): number {" line16="        return this.___SPEED_PIN_is_set ? this.___SPEED_PIN : MicrobitIo.SPEED_PIN" line17="    }" line18="    set SPEED_PIN(value: number) {" line19="        this.___SPEED_PIN_is_set = true" line20="        this.___SPEED_PIN = value" line21="    }" line22="    " line23="    public static __initMicrobitIo() {" line24="        MicrobitIo.STEERING_PIN = AnalogPin.P0" line25="        MicrobitIo.SPEED_PIN = AnalogPin.P1" line26="    }" line27="    " line28="    public setSteeringAngle(aAngle: number) {" line29="        let myClippedAngle = clip(aAngle, 0, 180)" line30="        pins.servoWritePin(MicrobitIo.STEERING_PIN, myClippedAngle)" line31="        if (myClippedAngle &lt; 90) {" line32="            this._drawSteeringArrow(ArrowNames.West)" line33="        } else if (myClippedAngle &gt; 90) {" line34="            this._drawSteeringArrow(ArrowNames.East)" line35="        } else {" line36="            //  myClippedAngle == 90" line37="            this._drawSteeringArrow(ArrowNames.North)" line38="        }" line39="        " line40="    }" line41="    " line42="    public setSpeed(aSpeed: number) {" line43="        let myClippedSpeed = clip(aSpeed, 0, 180)" line44="        pins.servoWritePin(MicrobitIo.SPEED_PIN, myClippedSpeed)" line45="        function toBarHeight(aClippedSpeed: number): number {" line46="            return Math.idiv(aClippedSpeed - 90, 22)" line47="        }" line48="        " line49="        if (myClippedSpeed &lt; 90) {" line50="            this._drawSpeedBar(toBarHeight(myClippedSpeed))" line51="        } else if (myClippedSpeed &gt; 90) {" line52="            this._drawSpeedBar(toBarHeight(myClippedSpeed))" line53="        } else {" line54="            //  myClippedSpeed == 90" line55="            this._drawSpeedBar(toBarHeight(myClippedSpeed))" line56="        }" line57="        " line58="    }" line59="    " line60="    private _drawSteeringArrow(aDirection: number) {" line61="        let myX: number;" line62="        /** " line63="        ArrowNames.EAST:" line64="        o o o o o" line65="        o o o o o" line66="        o o o # ." line67="        o o o # #" line68="        o o o # ." line69="" line70="        ArrowNames.WEST:" line71="        o o o o o" line72="        o o o o o" line73="        o o o . #" line74="        o o o # #" line75="        o o o . #" line76="" line77="        ArrowNames.NORTH:" line78="        o o o o o" line79="        o o o o o" line80="        o o o # #" line81="        o o o # #" line82="        o o o # #" line83="        " line84=" */" line85="        for (myX = 3; myX &lt; 5; myX++) {" line86="            led.unplot(myX, 2)" line87="            led.unplot(myX, 4)" line88="        }" line89="        for (myX = 3; myX &lt; 5; myX++) {" line90="            led.plot(myX, 3)" line91="        }" line92="        if (aDirection == ArrowNames.East) {" line93="            led.plot(3, 2)" line94="            led.plot(3, 4)" line95="        } else if (aDirection == ArrowNames.West) {" line96="            led.plot(4, 2)" line97="            led.plot(4, 4)" line98="        } else if (aDirection == ArrowNames.North) {" line99="            for (myX = 3; myX &lt; 5; myX++) {" line100="                led.plot(myX, 2)" line101="                led.plot(myX, 4)" line102="            }" line103="        } else {" line104="            for (myX = 3; myX &lt; 5; myX++) {" line105="                led.plot(myX, 3)" line106="            }" line107="        }" line108="        " line109="    }" line110="    " line111="    private _drawSpeedBar(aBarHeight: number) {" line112="        /** " line113="        aBarHeight: int" line114="            must be in range [-4, 4]" line115="    " line116="        Positive heights plotted from the bottom up, e.g., +3:" line117="        . . o o o" line118="        . . o o o" line119="        # # o o o" line120="        # # o o o" line121="        # # o o o" line122="" line123="        Negative heights plotted from the bottom up, e.g., -4:" line124="        # # o o o" line125="        # # o o o" line126="        # # o o o" line127="        # # o o o" line128="        . . o o o" line129="        " line130=" */" line131="        for (let myX2 = 0; myX2 &lt; 5; myX2++) {" line132="            led.unplot(myX2, 0)" line133="            led.unplot(myX2, 1)" line134="        }" line135="        if (aBarHeight &gt; 0) {" line136="            " line137="        } else if (aBarHeight &lt; 0) {" line138="            " line139="        }" line140="        " line141="    }" line142="    " line143="}" numlines="144"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="MicrobitIo.__initMicrobitIo()" numlines="1"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ControllerDecoder {" line1="    io: IoInterface" line2="    constructor(aIo: IoInterface) {" line3="        this.io = aIo" line4="    }" line5="    " line6="    public decode(aKey: string, aVal: number) {" line7="        if (aKey == STEERING_KEY) {" line8="            this.io.setSteeringAngle(aVal)" line9="        } else if (aKey == SPEED_KEY) {" line10="            this.io.setSpeed(aVal)" line11="        } else {" line12="            control.fail(&quot;Received unknown key: {aKey}, with value {aVal}&quot;)" line13="        }" line14="        " line15="    }" line16="    " line17="}" numlines="18"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let decoder = new ControllerDecoder(new MicrobitIo())" numlines="1" declaredvars="decoder"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" x="633" y="7169"><mutation name="clip" functionid="-F_*]3F-Oe4Ly.BgX^Fr"><arg name="val" id="r04xssj6l13n4qksncn2" type="number"></arg><arg name="lo" id="l0p9p4xejnecfytqznm2" type="number"></arg><arg name="hi" id="7a140c9qfzkdo03k5sbcr" type="number"></arg></mutation><field name="function_name">clip</field><value name="r04xssj6l13n4qksncn2"><block type="argument_reporter_number"><mutation duplicateondrag="true"></mutation><field name="VALUE">val</field></block></value><value name="l0p9p4xejnecfytqznm2"><block type="argument_reporter_number"><mutation duplicateondrag="true"></mutation><field name="VALUE">lo</field></block></value><value name="7a140c9qfzkdo03k5sbcr"><block type="argument_reporter_number"><mutation duplicateondrag="true"></mutation><field name="VALUE">hi</field></block></value><statement name="STACK"><block type="controls_if"><mutation elseif="1" else="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">LT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">val</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">lo</field></block></value></block></value><statement name="DO0"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">lo</field></block></value></block></statement><value name="IF1"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">GT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">val</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">hi</field></block></value></block></value><statement name="DO1"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">hi</field></block></value></block></statement><statement name="ELSE"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">val</field></block></value></block></statement></block></statement></block><block type="device_forever" x="0" y="7221"></block><block type="radio_on_value_drag" x="205" y="7221"><value name="HANDLER_DRAG_PARAM_name"><block type="argument_reporter_string"><mutation duplicateondrag="true"></mutation><field name="VALUE">name</field></block></value><value name="HANDLER_DRAG_PARAM_value"><block type="argument_reporter_number"><mutation duplicateondrag="true"></mutation><field name="VALUE">value</field></block></value><statement name="HANDLER"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="decoder.decode(name, value)" numlines="1"></mutation></block></statement></block></xml>